import React, { useEffect, useState } from 'react'
import { Table, Avatar, Button, Popconfirm, message, Switch, Modal, Form, Input, Select } from 'antd'
import type { ColumnsType } from 'antd/es/table'
import axios from 'axios'
import { EditOutlined, DeleteOutlined, QuestionCircleOutlined } from '@ant-design/icons'

interface TableItem {
    id: number; // Optional for new users, as it seems to be autogenerated
    username: string;
    password: string;
    roleState: boolean;
    default: boolean;
    region: string;
    roleId: number;
    avatar: string;
    role: any
}

interface RegionI {
    id: number,
    title: string,
    value: string
}

interface RoleI {
    id: number;
    roleName: string;
    roleType: number;
    rights: string[]
}

export default function UserList() {
    const [tableData, setTableData] = useState<TableItem[]>([])
    const [isModalVisible, setIsModalVisible] = useState<boolean>(false)
    const [regions, setRegions] = useState<RegionI[] | null>(null)
    const [roles, setRoles] = useState<RoleI[] | null>(null)
    // 获取用户列表数据
    useEffect(() => {
        axios.get('http://localhost:3004/users?_expand=role').then(res => {
            if (res.status === 200) {
                setTableData(res.data)
            } else {
                message.error('获取用户列表失败')
            }
        })
    }, [])
    // 获取区域信息
    useEffect(() => {
        axios.get('http://localhost:3004/regions').then(res => {
            if (res.status === 200) {
                setRegions(res.data)
            } else {
                message.error('获取区域信息失败')
            }
        })
    }, [])
    // 获取角色列表
    useEffect(() => {
        axios.get('http://localhost:3004/roles').then(res => {
            if (res.status === 200) {
                setRoles(res.data)
            } else {
                message.error('获取角色列表失败')
            }
        })
    }, [])

    // table配置
    const columns: ColumnsType<TableItem> = [
        {
            title: '区域',
            dataIndex: 'region',
            key: 'region',
        },
        {
            title: '角色名称',
            render: (data: TableItem) => (data.role.roleName)
        },
        {
            title: '头像',
            dataIndex: 'avatar',
            key: 'avatar',
            render: (data: string) => {
                return (
                    <div>
                        <Avatar className='bg-[#ccc]' size={48} shape='circle' src={<img src={data} alt="avatar" />} ></Avatar>
                    </div >
                )
            }
        },
        {
            title: '用户名',
            dataIndex: 'username',
            key: 'username',

        },
        {
            title: '用户状态',
            dataIndex: 'roleState',
            key: 'roleState',
            render: (data: boolean) => {
                return (<Switch className='bg-[#666]' checkedChildren="开启" unCheckedChildren="关闭" checked={data} />)
            }
        },
        {
            title: '操作',
            render: (_, data: TableItem) => {
                return <div className='flex flex-row gap-3'>
                    <Popconfirm
                        title="删除用户"
                        description="您确定要删除该用户？"
                        icon={<QuestionCircleOutlined style={{ color: 'red' }} />}
                        cancelText="取消"
                        okText="确定"
                        okType="danger"
                    >
                        <Button danger shape='circle' disabled={data.default} icon={<DeleteOutlined />}></Button>
                    </Popconfirm>

                    <Button shape='circle' disabled={data.default} icon={<EditOutlined />} onClick={() => {
                        setIsModalVisible(true)
                    }}></Button>
                </div>
            },
        },
    ]
    // 表单确认
    const handleOk = () => {
        console.log('处理数据')
        setIsModalVisible(false)
    }
    // 表单关闭
    const handleCancel = () => {
        setIsModalVisible(false)
    }
    return (
        <div>
            <Table columns={columns} dataSource={tableData} rowKey={(item) => item.id} />
            {/* 表单模态框 */}
            <Modal title="编辑用户" cancelText='取消' okText='确定' okType={'danger'} open={isModalVisible} onOk={handleOk} onCancel={handleCancel}>
                <Form
                    labelCol={{ span: 4 }}
                    name="basic"
                    initialValues={{ remember: true }}
                    onFinish={handleOk}
                    onFinishFailed={handleCancel}
                    autoComplete="off"
                >
                    <Form.Item
                        label="用户名"
                        name="username"
                        rules={[{ required: true, message: '请输入用户名' }]}
                    >
                        <Input />
                    </Form.Item>

                    <Form.Item
                        label="密码"
                        name="password"
                        rules={[{ required: true, message: '请输入密码' }]}
                    >
                        <Input.Password />
                    </Form.Item>
                    <Form.Item
                        label="区域"
                        name="region"
                        rules={[{ required: true, message: '请选择区域' }]}
                    >
                        <Select
                            style={{ width: '100%' }}
                            allowClear
                            options={regions?.map((item) => {
                                return {
                                    value: item.id,
                                    label: item.title
                                }
                            })}
                        />
                    </Form.Item>
                    <Form.Item
                        label="角色"
                        name="roleId"
                        rules={[{ required: true, message: '请选择角色' }]}
                    >
                        <Select
                            style={{ width: '100%' }}
                            allowClear
                            options={roles?.map((item) => {
                                return {
                                    value: item.id,
                                    label: item.roleName
                                }
                            })}
                        />
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    )
}
